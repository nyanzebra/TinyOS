#pragma once

#include "__string"
#include "__console"

namespace io {
namespace console {

inline void clear() {
    for (unsigned int i = 0; i < (CONSOLE_ROWS * CONSOLE_COLUMNS); ++i) {
        gBUFFER[i] = 0;
    }
    gROW = 0;
    gCOLUMN = 0;
}

inline void putchar(const char ascii, const char color = ((char) color_code::kWHITE | (char) color_code::kBLACK << 4)) {
    if (gCOLUMN == CONSOLE_COLUMNS) {
        gROW++;
        gCOLUMN = 0;
        if (gROW == CONSOLE_ROWS) {
            //_shift_up(); TODO
        }
    }
    if (ascii == NEWLINE) {
        gCOLUMN = 0;
        gROW++;
    } else {   
        gBUFFER[(gROW * CONSOLE_COLUMNS) + gCOLUMN++] = (short) ascii | (short) color << 8;
    }
}

namespace implementation {

void printf(const char* str, const unsigned int loc, const unsigned int size) { for (unsigned int i = loc; i < size; ++i) putchar(str[i]); }

template <typename T, typename... Rest>
void printf(const char* str, const unsigned int loc, const unsigned int size, T&& value, Rest&&... rest) {
    char buffer[20];
    const char* ptr;
    for (unsigned int i = loc; i < size; ++i) {
        if (str[i] == '%') {
            switch (str[i + 1]) {
                case 'u':
                case 'd':
                case 'x':
                    ptr = itoa(move(value), buffer, str[i + 1]);
                    goto string;
                    break;
                case 's':
                    if (value == NULL) {
                        ptr = "(null)";
                    } else {
                        ptr = move(value);
                        goto string;
                    }
                    break;
                string:
                    while (*ptr) putchar(*ptr++);
                    break;
                default:
                    putchar(value);
                    break;
            }
            printf(str, i + 2, size, move(rest)...);
            break;
        } else {
            putchar(str[i]);
        }
    }
}

}

template <typename... T>
void printf(const char* str, T&&... values) { implementation::printf(str, 0, strlen(str), move(values)...); }

void __debug(const char* str) { for(unsigned int i = 0; i < strlen(str); ++i) putchar(str[i]); }

}
}

