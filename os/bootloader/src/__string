#pragma once

#include "__utility"

#ifndef STREND
#define STREND '\0'
#endif

#ifndef NULL
#define NULL 0
#endif

unsigned int strlen(const char* str) {
    unsigned int i = 0;
    while (str[i++] != '\0');
    return i;
}

void strcpy(const char* source, const unsigned int source_length, char*& destination, const unsigned int destination_length) {
    for (unsigned int i = 0; i < destination_length && i < source_length; ++i) {
        destination[i] = source[i];
    }
}

void strcpy(const char* source, char*& destination) { while ((*destination++ = *source++)); }

void strrev(char* str, unsigned int begin, unsigned int end) { while (begin < end) swap(str[begin++], str[end--]); }

void strrev(char* str) { strrev(str, 0, strlen(str) - 1); }

char* itoa(int value, char* buffer, unsigned int base) {
    switch (base) {
        case 'd':
        case 'u':
            base = 10;
            break;
        case 'x':
            base = 16;
            break;
        default:
            break;
    }

    bool negative = value < 0; 

    // value = 2017, ['7','1','0','2','\0',0...] 
    unsigned int i = 0;
    do {
        unsigned int remainder = value % base;
        buffer[i++] = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
    } while(value /= base);

    if (negative) {
        buffer[i++] = '-';
    }

    buffer[i] = STREND;

    strrev(buffer, 0, i - 1);

    return buffer;
}

