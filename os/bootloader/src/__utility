#pragma once

template <typename T>
void swap(T& a, T& b) {
    T temp = a;
    a = b;
    b = temp;
}

template <typename T>
struct remove_reference { typedef T type; };

template <typename T>
struct remove_reference<T&> { typedef T type; };

template <typename T>
struct remove_reference<T&&> { typedef T type; };

template <typename T>
using remove_reference_type = typename remove_reference<T>::type;

template <typename T>
constexpr remove_reference_type<T>&& move(T&& arg) { return static_cast<remove_reference_type<T>&&>(arg); }


